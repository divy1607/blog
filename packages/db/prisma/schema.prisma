// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  username     String   @unique
  password     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  comments     Comment[] 
  replies      Reply[]  
  likes        Like[]    
}

model Blog {
  id            Int      @id @default(autoincrement())
  title         String   @unique
  description   String
  content       String
  tag           String[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  likes         Like[]    
  comments      Comment[] 
}

model Comment {
  id            Int      @id @default(autoincrement())
  content       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        Int      
  blogId        Int      
  user          User     @relation(fields: [userId], references: [id])
  blog          Blog     @relation(fields: [blogId], references: [id])
  replies       Reply[]  
  likes         Like[]   
}

model Reply {
  id            Int      @id @default(autoincrement())
  content       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        Int      
  commentId     Int      
  user          User     @relation(fields: [userId], references: [id])
  comment       Comment  @relation(fields: [commentId], references: [id])
}

model Like {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  userId        Int
  blogId        Int?     
  commentId     Int?     
  user          User     @relation(fields: [userId], references: [id])
  blog          Blog?    @relation(fields: [blogId], references: [id])
  comment       Comment? @relation(fields: [commentId], references: [id])

  @@unique([userId, blogId])    
  @@unique([userId, commentId]) 
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
}
